{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5cac7a5897b876d9676dcef1ebe9304839893f57a2646e93cc894427250d5af",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1019200",
    "logsBloom": "0x
    "blockHash": "0x9adb6c3a0be91ee6409cb746baef64b12f07cf1ede6c5afedf91f4a7e6d6bff6",
    "transactionHash": "0xa5cac7a5897b876d9676dcef1ebe9304839893f57a2646e93cc894427250d5af",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1019200",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0e337b7123f3bf051c8aba24f773fd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Samuel Costa\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Contructors Receive Fallback External Public Internal Private View / Pure\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//Pragma\\npragma solidity ^0.8.8;\\n//Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// Errors Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/**@title A Contract for crowd funding\\n * @author Samuel Costa\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    /// Contructors\\n    /// Receive\\n    /// Fallback\\n    /// External\\n    /// Public\\n    /// Internal\\n    /// Private\\n    /// View / Pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x088d4209c06d5fba6517f4e46c91b3145fa172dfae1923157f39e44c13930e50\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x03051d7dee7664301ac9daa006156decaa2bc64d2ecfc91fe35499cbaca42dc2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129d3803806200129d833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111106200018d600039600081816101f00152818161038301528181610429015281816105b301526107f001526111106000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ab4565b6101a6565b6040516100b49190610afa565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e9610418565b6040516100f69190610afa565b60405180910390f35b34801561010b57600080fd5b50610114610425565b6040516101219190610b24565b60405180910390f35b34801561013657600080fd5b5061013f61044d565b60405161014c9190610b9e565b60405180910390f35b61015d610477565b005b6101676105b1565b005b34801561017557600080fd5b50610190600480360381019061018b9190610be5565b610886565b60405161019d9190610b24565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610c12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c70565b915050610276565b50600067ffffffffffffffff81111561033a57610339610cb9565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e9291906109aa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103c590610d19565b60006040518083038185875af1925050503d8060008114610402576040519150601f19603f3d011682016040523d82523d6000602084013e610407565b606091505b505090508061041557600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104b6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ce90919063ffffffff16565b10156104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90610d8b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105459190610dab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561067c573d6000803e3d6000fd5b506000600180548060200260200160405190810160405280929190818152602001828054801561070157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106b7575b5050505050905060005b815181101561078b57600082828151811061072957610728610c12565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078390610c70565b91505061070b565b50600067ffffffffffffffff8111156107a7576107a6610cb9565b5b6040519080825280602002602001820160405280156107d55781602001602082028036833780820191505090505b50600190805190602001906107eb9291906109aa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083290610d19565b60006040518083038185875af1925050503d806000811461086f576040519150601f19603f3d011682016040523d82523d6000602084013e610874565b606091505b505090508061088257600080fd5b5050565b60006001828154811061089c5761089b610c12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108da8361090a565b90506000670de0b6b3a764000085836108f39190610e01565b6108fd9190610e8a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095357600080fd5b505afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190610f48565b5050509150506402540be400816109a29190610fc3565b915050919050565b828054828255906000526020600020908101928215610a23579160200282015b82811115610a225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ca565b5b509050610a309190610a34565b5090565b5b80821115610a4d576000816000905550600101610a35565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8182610a56565b9050919050565b610a9181610a76565b8114610a9c57600080fd5b50565b600081359050610aae81610a88565b92915050565b600060208284031215610aca57610ac9610a51565b5b6000610ad884828501610a9f565b91505092915050565b6000819050919050565b610af481610ae1565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b610b1e81610a76565b82525050565b6000602082019050610b396000830184610b15565b92915050565b6000819050919050565b6000610b64610b5f610b5a84610a56565b610b3f565b610a56565b9050919050565b6000610b7682610b49565b9050919050565b6000610b8882610b6b565b9050919050565b610b9881610b7d565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b610bc281610ae1565b8114610bcd57600080fd5b50565b600081359050610bdf81610bb9565b92915050565b600060208284031215610bfb57610bfa610a51565b5b6000610c0984828501610bd0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7b82610ae1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cae57610cad610c41565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d03600083610ce8565b9150610d0e82610cf3565b600082019050919050565b6000610d2482610cf6565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d75601b83610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b6000610db682610ae1565b9150610dc183610ae1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df657610df5610c41565b5b828201905092915050565b6000610e0c82610ae1565b9150610e1783610ae1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5057610e4f610c41565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9582610ae1565b9150610ea083610ae1565b925082610eb057610eaf610e5b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eda81610ebb565b8114610ee557600080fd5b50565b600081519050610ef781610ed1565b92915050565b6000819050919050565b610f1081610efd565b8114610f1b57600080fd5b50565b600081519050610f2d81610f07565b92915050565b600081519050610f4281610bb9565b92915050565b600080600080600060a08688031215610f6457610f63610a51565b5b6000610f7288828901610ee8565b9550506020610f8388828901610f1e565b9450506040610f9488828901610f33565b9350506060610fa588828901610f33565b9250506080610fb688828901610ee8565b9150509295509295909350565b6000610fce82610efd565b9150610fd983610efd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101857611017610c41565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105557611054610c41565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109257611091610c41565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110cf576110ce610c41565b5b82820290509291505056fea2646970667358221220c66ae26579ea329b891e4a8cca81eb9d1c92f4891fdb6c20246132ffc7c1482664736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610ab4565b6101a6565b6040516100b49190610afa565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e9610418565b6040516100f69190610afa565b60405180910390f35b34801561010b57600080fd5b50610114610425565b6040516101219190610b24565b60405180910390f35b34801561013657600080fd5b5061013f61044d565b60405161014c9190610b9e565b60405180910390f35b61015d610477565b005b6101676105b1565b005b34801561017557600080fd5b50610190600480360381019061018b9190610be5565b610886565b60405161019d9190610b24565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610c12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c70565b915050610276565b50600067ffffffffffffffff81111561033a57610339610cb9565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e9291906109aa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103c590610d19565b60006040518083038185875af1925050503d8060008114610402576040519150601f19603f3d011682016040523d82523d6000602084013e610407565b606091505b505090508061041557600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104b6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ce90919063ffffffff16565b10156104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90610d8b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105459190610dab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561067c573d6000803e3d6000fd5b506000600180548060200260200160405190810160405280929190818152602001828054801561070157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106b7575b5050505050905060005b815181101561078b57600082828151811061072957610728610c12565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078390610c70565b91505061070b565b50600067ffffffffffffffff8111156107a7576107a6610cb9565b5b6040519080825280602002602001820160405280156107d55781602001602082028036833780820191505090505b50600190805190602001906107eb9291906109aa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083290610d19565b60006040518083038185875af1925050503d806000811461086f576040519150601f19603f3d011682016040523d82523d6000602084013e610874565b606091505b505090508061088257600080fd5b5050565b60006001828154811061089c5761089b610c12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108da8361090a565b90506000670de0b6b3a764000085836108f39190610e01565b6108fd9190610e8a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095357600080fd5b505afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190610f48565b5050509150506402540be400816109a29190610fc3565b915050919050565b828054828255906000526020600020908101928215610a23579160200282015b82811115610a225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ca565b5b509050610a309190610a34565b5090565b5b80821115610a4d576000816000905550600101610a35565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8182610a56565b9050919050565b610a9181610a76565b8114610a9c57600080fd5b50565b600081359050610aae81610a88565b92915050565b600060208284031215610aca57610ac9610a51565b5b6000610ad884828501610a9f565b91505092915050565b6000819050919050565b610af481610ae1565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b610b1e81610a76565b82525050565b6000602082019050610b396000830184610b15565b92915050565b6000819050919050565b6000610b64610b5f610b5a84610a56565b610b3f565b610a56565b9050919050565b6000610b7682610b49565b9050919050565b6000610b8882610b6b565b9050919050565b610b9881610b7d565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b610bc281610ae1565b8114610bcd57600080fd5b50565b600081359050610bdf81610bb9565b92915050565b600060208284031215610bfb57610bfa610a51565b5b6000610c0984828501610bd0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7b82610ae1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cae57610cad610c41565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d03600083610ce8565b9150610d0e82610cf3565b600082019050919050565b6000610d2482610cf6565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d75601b83610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b6000610db682610ae1565b9150610dc183610ae1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df657610df5610c41565b5b828201905092915050565b6000610e0c82610ae1565b9150610e1783610ae1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5057610e4f610c41565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9582610ae1565b9150610ea083610ae1565b925082610eb057610eaf610e5b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eda81610ebb565b8114610ee557600080fd5b50565b600081519050610ef781610ed1565b92915050565b6000819050919050565b610f1081610efd565b8114610f1b57600080fd5b50565b600081519050610f2d81610f07565b92915050565b600081519050610f4281610bb9565b92915050565b600080600080600060a08688031215610f6457610f63610a51565b5b6000610f7288828901610ee8565b9550506020610f8388828901610f1e565b9450506040610f9488828901610f33565b9350506060610fa588828901610f33565b9250506080610fb688828901610ee8565b9150509295509295909350565b6000610fce82610efd565b9150610fd983610efd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101857611017610c41565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105557611054610c41565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109257611091610c41565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110cf576110ce610c41565b5b82820290509291505056fea2646970667358221220c66ae26579ea329b891e4a8cca81eb9d1c92f4891fdb6c20246132ffc7c1482664736f6c63430008080033",
  "devdoc": {
    "author": "Samuel Costa",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A Contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Contructors Receive Fallback External Public Internal Private View / Pure"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}